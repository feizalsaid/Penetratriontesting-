INTRODUCTION 
I downloaded covfefe machine from vulnhub .It’s a vulnerable machine from vulnhub  .Covfefe is my Debian 9 based B2R VM, originally created as a CTF for SecTalks_BNE. The link for the machine is https://www.vulnhub.com/entry/covfefe-1,199/


SCOPE
The aim of this pentest activity is to gain root priviledges and the three flags in  the machine as proo of concept.


INFORMATION GATHERING(ENUMERATION)
I used arp-scan to locate the ip of the vulnerable machine .and found it to be 10.0.2.7 .This was the result :

Interface: eth0, type: EN10MB, MAC: 08:00:27:9f:f9:bf, IPv4: 10.0.2.15
WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied
WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied
Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)
10.0.2.1        52:54:00:12:35:00       (Unknown: locally administered)
10.0.2.2        52:54:00:12:35:00       (Unknown: locally administered)
10.0.2.3        08:00:27:f8:ad:33       (Unknown)
10.0.2.7        08:00:27:50:99:f6       (Unknown) ////THIS WA S THE VULNERABLE MACHINE’S IP.

4 packets received by filter, 0 packets dropped by kernel
Ending arp-scan 1.10.0: 256 hosts scanned in 1.887 seconds (135.67 hosts/sec). 4 responded

I did an nmap scan and found 3 open ports :
22 – ssh 
80 – http 
31337 --  werkzeug 

The exact nmap report is :
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-20 11:19 EDT
Nmap scan report for 10.0.2.7
Host is up (0.00088s latency).
Not shown: 65532 closed tcp ports (conn-refused)
PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 7.4p1 Debian 10 (protocol 2.0)
| ssh-hostkey: 
|   2048 d0:6a:10:e0:fb:63:22:be:09:96:0b:71:6a:60:ad:1a (RSA)
|   256 ac:2c:11:1e:e2:d6:26:ea:58:c4:3e:2d:3e:1e:dd:96 (ECDSA)
|_  256 13:b3:db:c5:af:62:c2:b1:60:7d:2f:48:ef:c3:13:fc (ED25519)
80/tcp    open  http    nginx 1.10.3
|_http-server-header: nginx/1.10.3
|_http-title: Welcome to nginx!
31337/tcp open  http    Werkzeug httpd 0.11.15 (Python 3.5.3)
|_http-title: 404 Not Found
|_http-server-header: Werkzeug/0.11.15 Python/3.5.3
| http-robots.txt: 3 disallowed entries 
|_/.bashrc /.profile /taxes
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 16.74 seconds
                                                             
WEBSITE POTENTIAL ATTACK VECTOR .
I enumerated the ports 80 and 31337 using dirb to find directories in the respective ports .
Port 80 had no insightful returns but port 31337 had the following result when I used dirb :

-----------------
DIRB v2.22    
By The Dark Raver
-----------------

START_TIME: Tue Aug 20 11:37:33 2024
URL_BASE: http://10.0.2.7:31337/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt
OPTION: Show Not Existent Pages

-----------------

                                                                              GENERATED WORDS: 4612

---- Scanning URL: http://10.0.2.7:31337/ ----
+http://10.0.2.7:31337/.bash_history (CODE:200|SIZE:19)                      
+ http://10.0.2.7:31337/.bashrc (CODE:200|SIZE:3526)                          
+ http://10.0.2.7:31337/.profile (CODE:200|SIZE:675)                          
+ http://10.0.2.7:31337/.ssh (CODE:200|SIZE:43)                               
+ http://10.0.2.7:31337/robots.txt (CODE:200|SIZE:70)                         
                                                                               
-----------------
END_TIME: Tue Aug 20 11:37:45 2024
DOWNLOADED: 4612 - FOUND: 5




I visited each of the five repositories . Starting with the .ssh where I found the encrypted private id_rsa and found a username “simon “  under the authorized_keys   directory .
The private key was encrypted so I used “ssh2john “ to convert it and decrypted it using “johntheripper” .
The password was “starwars” for the public key .I changed the permissions on the private key to 400.
I visited the “/taxes “ directory  and found the first the flag :
	Good job! Here is a flag: flag1{make_america_great_again}  

That being done I now had to  login using the username and the decrypted key .
On reading the bash history file I saw a command “read_message”. I searrched for the file and saw it was in the root directory :
	 find / -type f -name read_me* 2>/dev/null 
/usr/local/bin/read_message
/root/read_message.c 
 On reading the .c file  I saw that it was vulnerable to buffer overflows  due to this section of code :
	int main(int argc, char *argv[]) {
    char program[] = "/usr/local/sbin/message";
    char buf[20];                        ////////////this section shows it is vulnerable to a buffer overflow
    char authorized[] = "Simon";
 
I therefore run the command and gave it this input “Simonqwertyuioplkjhg/bin/sh’
 and it gave me root access . And there I got the root flag :
“You did it! Congratulations, here's the final flag:
flag3{das_bof_meister}” 

 Flag2 was in the read_message source code :
// You're getting close! Here's another flag:
// flag2{use_the_source_luke}

CONCLUSION
A security assessment and penetration test of covfefe ,revealed that it had various flaws and malpractices.Critical information of login credential was left on the web server which could have been taken by anyone with ill intent .Various programs in the system was also found to be vulnerable to Buffer overflows .The system admin should tighten their security by making their programs more abstract and also increase basic knowledge on security practises on their web activities , a layer of obscurity or saving the login details on personal computers instead of on the web server.

TOOLS USED:
Arp-scan 
nmap
ssh2john 
johntheripper
nikto
dirb

